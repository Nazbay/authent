{"ast":null,"code":"import axios from \"axios\";\nconst AuthActionType = {\n  REGISTER_SUCCESS: \"REGISTER_SUCCESS\",\n  REGISTER_FAIL: \"REGISTER_FAIL\",\n  LOGOUT_SUCCESS: \"LOGOUT_SUCCESS\",\n  LOGOUT_FAIL: \"LOGOUT_FAIL\",\n  LOGIN_SUCCESS: \"LOGIN_SUCCESS\",\n  LOGIN_FAIL: \"LOGIN_FAIL\"\n};\n\nconst RegisterAuthAction = (userState, history, setErrorHandler) => {\n  return async dispatch => {\n    try {\n      const res = await axios.post(\"/signup\", userState);\n      const {\n        data\n      } = res;\n      dispatch({\n        type: AuthActionType.REGISTER_SUCCESS,\n        payload: data\n      });\n      history.push(\"/\");\n    } catch (error) {\n      if (error.response) {\n        dispatch({\n          type: AuthActionType.REGISTER_FAIL,\n          payload: error.response.data.message\n        });\n        setErrorHandler({\n          hasError: true,\n          message: error.response.data.message\n        });\n      }\n    }\n  };\n};\n\n_c = RegisterAuthAction;\n\nconst LoginAuthAction = (loginState, history, setErrorHandler) => {\n  return async dispatch => {\n    try {\n      const res = await axios.post(\"/signin\", loginState);\n      const {\n        data\n      } = res;\n      dispatch({\n        type: AuthActionType.LOGIN_SUCCESS,\n        payload: data\n      });\n      history.push(\"/\");\n    } catch (error) {\n      if (error.response) {\n        dispatch({\n          type: AuthActionType.LOGIN_FAIL,\n          payload: error.response.data.message\n        });\n      }\n\n      setErrorHandler({\n        hasError: true,\n        message: error.response.data.message\n      });\n    }\n  };\n};\n\n_c2 = LoginAuthAction;\nexport { RegisterAuthAction, AuthActionType // LogOutAuthAction,\n, LoginAuthAction };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RegisterAuthAction\");\n$RefreshReg$(_c2, \"LoginAuthAction\");","map":{"version":3,"sources":["/Users/bajelnazarov/Documents/VSCode/projects/auth6/ReactProjects/src/redux/actions/AuthAction.js"],"names":["axios","AuthActionType","REGISTER_SUCCESS","REGISTER_FAIL","LOGOUT_SUCCESS","LOGOUT_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","RegisterAuthAction","userState","history","setErrorHandler","dispatch","res","post","data","type","payload","push","error","response","message","hasError","LoginAuthAction","loginState"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,gBAAgB,EAAE,kBADG;AAErBC,EAAAA,aAAa,EAAE,eAFM;AAGrBC,EAAAA,cAAc,EAAE,gBAHK;AAIrBC,EAAAA,WAAW,EAAE,aAJQ;AAKrBC,EAAAA,aAAa,EAAE,eALM;AAMrBC,EAAAA,UAAU,EAAE;AANS,CAAvB;;AASA,MAAMC,kBAAkB,GAAG,CAACC,SAAD,EAAYC,OAAZ,EAAqBC,eAArB,KAAyC;AAClE,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMb,KAAK,CAACc,IAAN,CAAW,SAAX,EAAsBL,SAAtB,CAAlB;AACA,YAAM;AAAEM,QAAAA;AAAF,UAAWF,GAAjB;AACAD,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEf,cAAc,CAACC,gBAAvB;AAAyCe,QAAAA,OAAO,EAAEF;AAAlD,OAAD,CAAR;AACAL,MAAAA,OAAO,CAACQ,IAAR,CAAa,GAAb;AACD,KALD,CAKE,OAAOC,KAAP,EAAc;AACd,UAAIA,KAAK,CAACC,QAAV,EAAoB;AAClBR,QAAAA,QAAQ,CAAC;AACPI,UAAAA,IAAI,EAAEf,cAAc,CAACE,aADd;AAEPc,UAAAA,OAAO,EAAEE,KAAK,CAACC,QAAN,CAAeL,IAAf,CAAoBM;AAFtB,SAAD,CAAR;AAIAV,QAAAA,eAAe,CAAC;AACdW,UAAAA,QAAQ,EAAE,IADI;AAEdD,UAAAA,OAAO,EAAEF,KAAK,CAACC,QAAN,CAAeL,IAAf,CAAoBM;AAFf,SAAD,CAAf;AAID;AACF;AACF,GAlBD;AAmBD,CApBD;;KAAMb,kB;;AAsBN,MAAMe,eAAe,GAAG,CAACC,UAAD,EAAad,OAAb,EAAsBC,eAAtB,KAA0C;AAChE,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMb,KAAK,CAACc,IAAN,CAAW,SAAX,EAAsBU,UAAtB,CAAlB;AACA,YAAM;AAAET,QAAAA;AAAF,UAAWF,GAAjB;AACAD,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEf,cAAc,CAACK,aAAvB;AAAsCW,QAAAA,OAAO,EAAEF;AAA/C,OAAD,CAAR;AACAL,MAAAA,OAAO,CAACQ,IAAR,CAAa,GAAb;AACD,KALD,CAKE,OAAOC,KAAP,EAAc;AACd,UAAIA,KAAK,CAACC,QAAV,EAAoB;AAClBR,QAAAA,QAAQ,CAAC;AACPI,UAAAA,IAAI,EAAEf,cAAc,CAACM,UADd;AAEPU,UAAAA,OAAO,EAAEE,KAAK,CAACC,QAAN,CAAeL,IAAf,CAAoBM;AAFtB,SAAD,CAAR;AAID;;AACDV,MAAAA,eAAe,CAAC;AAAEW,QAAAA,QAAQ,EAAE,IAAZ;AAAkBD,QAAAA,OAAO,EAAEF,KAAK,CAACC,QAAN,CAAeL,IAAf,CAAoBM;AAA/C,OAAD,CAAf;AACD;AACF,GAfD;AAgBD,CAjBD;;MAAME,e;AAyBN,SACEf,kBADF,EAEEP,cAFF,CAGE;AAHF,EAIEsB,eAJF","sourcesContent":["import axios from \"axios\";\n\nconst AuthActionType = {\n  REGISTER_SUCCESS: \"REGISTER_SUCCESS\",\n  REGISTER_FAIL: \"REGISTER_FAIL\",\n  LOGOUT_SUCCESS: \"LOGOUT_SUCCESS\",\n  LOGOUT_FAIL: \"LOGOUT_FAIL\",\n  LOGIN_SUCCESS: \"LOGIN_SUCCESS\",\n  LOGIN_FAIL: \"LOGIN_FAIL\",\n};\n\nconst RegisterAuthAction = (userState, history, setErrorHandler) => {\n  return async (dispatch) => {\n    try {\n      const res = await axios.post(\"/signup\", userState);\n      const { data } = res;\n      dispatch({ type: AuthActionType.REGISTER_SUCCESS, payload: data });\n      history.push(\"/\");\n    } catch (error) {\n      if (error.response) {\n        dispatch({\n          type: AuthActionType.REGISTER_FAIL,\n          payload: error.response.data.message,\n        });\n        setErrorHandler({\n          hasError: true,\n          message: error.response.data.message,\n        });\n      }\n    }\n  };\n};\n\nconst LoginAuthAction = (loginState, history, setErrorHandler) => {\n  return async (dispatch) => {\n    try {\n      const res = await axios.post(\"/signin\", loginState);\n      const { data } = res;\n      dispatch({ type: AuthActionType.LOGIN_SUCCESS, payload: data });\n      history.push(\"/\");\n    } catch (error) {\n      if (error.response) {\n        dispatch({\n          type: AuthActionType.LOGIN_FAIL,\n          payload: error.response.data.message,\n        });\n      }\n      setErrorHandler({ hasError: true, message: error.response.data.message });\n    }\n  };\n};\n\n\n\n\n\n\n\nexport {\n  RegisterAuthAction,\n  AuthActionType,\n  // LogOutAuthAction,\n  LoginAuthAction,\n};\n"]},"metadata":{},"sourceType":"module"}